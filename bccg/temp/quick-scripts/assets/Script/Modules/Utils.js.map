{"version":3,"sources":["Utils.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\Modules","sourcesContent":["/**\r\n * 创建UUID\r\n * \r\n * @param {number} len UUID长度\r\n * @param {number} radix 输出的进制（2,8,10,16）\r\n * @returns {string} 返回对应进制下制定长度的字符串\r\n * @memberof LoginCanvas\r\n */\r\nexport function createUUID(len: number, radix: number): string {\r\n    let chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\r\n    let uuid = [], i;\r\n    radix = radix || chars.length;\r\n    if (len) {\r\n        for (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random() * radix];\r\n    } else {\r\n        let r;\r\n        uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\r\n        uuid[14] = '4';\r\n        for (i = 0; i < 36; i++) {\r\n            if (!uuid[i]) {\r\n                r = 0 | Math.random() * 16;\r\n                uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\r\n            }\r\n        }\r\n    }\r\n    return uuid.join('');\r\n}\r\n/**\r\n * 修改微信获取的头像地址\r\n * \r\n * @export\r\n * @param {string} url 原始头像地址\r\n * @returns {string} 修改为96尺寸的地址\r\n */\r\nexport function getHeadImgUrl(url: string): string {\r\n    if (url === '' || url === '/0') return '';\r\n    let arrayList: string[] = url.split('/');\r\n    arrayList.pop();\r\n    return arrayList.join('/') + '/96';\r\n}\r\n\r\n/**\r\n * 截图保存到本地\r\n * \r\n * @export\r\n * @param {cc.Node} node 需要截图的节点\r\n * @param {string} saveName 需要保存图片的名字\r\n * @param {Function} callback 保存成功后的回调\r\n * @return {boolean} 是否保存\r\n */\r\nexport function captureScreen(node: cc.Node, saveName: string, callback: Function): void {\r\n    if (cc.sys.isNative && cc.sys.isMobile) {\r\n        let renderTexture = cc.RenderTexture.create(node.width, node.height, cc.Texture2D.PixelFormat.RGBA8888, gl.DEPTH24_STENCIL8_OES);\r\n        node.parent._sgNode.addChild(renderTexture);\r\n        renderTexture.setVisible(false);\r\n        renderTexture.begin();\r\n        node._sgNode.visit();\r\n        renderTexture.end();\r\n        renderTexture.saveToFile(saveName, cc.ImageFormat.PNG, true, (rt, path) => {\r\n            renderTexture.removeFromParent();\r\n            let interval = 0;\r\n            let timeId = setInterval(() => {\r\n                if (interval > 10000) {\r\n                    interval = null;\r\n                    clearInterval(timeId);\r\n                    callback();\r\n                }\r\n                if (jsb.fileUtils.isFileExist(path)) {\r\n                    interval = null;\r\n                    clearInterval(timeId);\r\n                    callback(path);\r\n                }\r\n                interval += 100;\r\n            }, 100);\r\n        });\r\n    } else {\r\n        callback();\r\n    }\r\n}\r\n\r\n/**\r\n * num是传入的正整数,返回千分位逗号分隔的字符串\r\n * \r\n * @export\r\n * @param {any} num \r\n * @returns \r\n */\r\nexport function getThousandString(num): string {\r\n    if (isNaN(num)) num = 0;\r\n    let numString = num.toString();\r\n    let result = \"\";\r\n    while (numString.length > 3) {\r\n        result = \",\" + numString.slice(-3) + result;\r\n        numString = numString.slice(0, numString.length - 3);\r\n    }\r\n    if (numString) { result = numString + result; }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 传入千分位的字符串，返回去除逗号的字符串\r\n * \r\n * @export\r\n * @param {string} str \r\n * @returns \r\n */\r\nexport function getBackNumString(str: string): string {\r\n    let list = str.split(\",\");\r\n    str = \"\";\r\n    for (let i = 0; i < list.length; i++) {\r\n        str += list[i];\r\n    }\r\n    return str;\r\n}\r\n\r\n/**\r\n * 传入带小数点的数字字符串，返回去除小数点的数组\r\n * @export\r\n * @param {string} str \r\n * @returns \r\n */\r\nexport function getPointNumString(str: string): number[] {\r\n    let list = str.split(\".\");\r\n    let numList = [];\r\n    for (let i = 0; i < list.length; i++) {\r\n        numList.push(Number(list[i]));\r\n    }\r\n    return numList;\r\n}\r\n\r\n/**\r\n * 传入数字，返回每位数字的组成的数组\r\n * @export\r\n * @param {number} num \r\n * @returns \r\n */\r\nexport function getNumberList(num: number): number[] {\r\n    let numList = num.toString().split(\"\").map((i) => {\r\n        return Number(i);\r\n    });\r\n    return numList;\r\n}\r\n\r\n/**\r\n * 根据时间戳，返回对应时间格式的字符串\r\n * \r\n * @param {string} timestamp  时间戳(字符串类型)\r\n * @param {number} type 1是只获取日期，2是只获取时间,默认都获取（数字类型）\r\n * @returns {string} \r\n */\r\nexport function getDateStringByTimestamp(timestamp: string, type: number = 0): string {\r\n    let num = Number(timestamp);\r\n    if (isNaN(num)) return '';\r\n    else {\r\n        let timeDate = new Date();\r\n        timeDate.setTime(num);\r\n        let timeDateString = this.getDateStringByDate(timeDate);\r\n        let timeString = this.getTimeStringByDate(timeDate);\r\n        if (type === 1) {\r\n            return timeDateString;\r\n        } else if (type === 2) {\r\n            return timeString;\r\n        } else {\r\n            return timeDateString + ' ' + timeString;\r\n        }\r\n    }\r\n}\r\n/**\r\n * 根据时间对象获取日期\r\n * \r\n * @param {Date} nowDate 时间对象\r\n * @param {string} connector 分隔符\r\n * @returns {string}\r\n */\r\nexport function getDateStringByDate(nowDate: Date, connector: string): string {\r\n    if (nowDate instanceof Date) {\r\n        if (!connector) {\r\n            connector = \"-\";\r\n        }\r\n        let year = nowDate.getFullYear() + '';\r\n        let month = nowDate.getMonth() + 1;\r\n        let monthStr = month + '';\r\n        if (month < 10) monthStr = \"0\" + month;\r\n        let day = nowDate.getDate();\r\n        let dayStr = day + '';\r\n        if (day < 10) dayStr = \"0\" + day;\r\n        return year + connector + monthStr + connector + dayStr;\r\n    }\r\n    return '';\r\n}\r\n/**\r\n * 根据时间对象获取时间\r\n * \r\n * @param {Date} nowDate 时间对象\r\n * @param {string} connector 分隔符\r\n * @returns {string}\r\n */\r\nexport function getTimeStringByDate(nowDate, connector): string {\r\n    if (nowDate instanceof Date) {\r\n        if (!connector) {\r\n            connector = \":\";\r\n        }\r\n        let hour = nowDate.getHours();\r\n        let hourStr = hour + '';\r\n        if (hour < 10) hourStr = \"0\" + hour;\r\n        let minute = nowDate.getMinutes();\r\n        let minuteStr = minute + '';\r\n        if (minute < 10) minuteStr = \"0\" + minute;\r\n        return hourStr + connector + minuteStr /*+ connector + secondStr*/;\r\n    }\r\n    return '';\r\n}\r\n\r\n/**\r\n * 获取倒计时字符串\r\n * \r\n * @param {number} time 倒计时毫秒数\r\n * @returns {string}\r\n */\r\nexport function getCountDownString(time: number): string {\r\n    if (time < 0) return '00:00:00';\r\n    let s = Math.floor(time / 1000);\r\n    let hour = Math.floor(s / 3600);\r\n    let minute = Math.floor((s - hour * 3600) / 60);\r\n    let second = s - hour * 3600 - minute * 60;\r\n    let str = '';\r\n    if (hour > 9) str += hour + ':';\r\n    else str += '0' + hour + ':';\r\n    if (minute > 9) str += minute + ':';\r\n    else str += '0' + minute + ':';\r\n    if (second > 9) str += second;\r\n    else str += '0' + second;\r\n    return str;\r\n\r\n}\r\n/**\r\n * 返回指定长度的字符串\r\n * \r\n * @export\r\n * @param {string} str \r\n * @param {number} size \r\n * @returns \r\n */\r\nexport function getStringBySize(str: string, size: number): string {\r\n    if (str.length > size) {\r\n        let len = 0;\r\n        let vaule = '';\r\n        for (let i = 0; i < str.length; i++) {\r\n            if (str.charCodeAt(i) > 255) {\r\n                len += 2;\r\n            } else {\r\n                len += 1;\r\n            }\r\n            if (len > size) {\r\n                break;\r\n            } else {\r\n                vaule += str.charAt(i);\r\n            }\r\n        }\r\n        return vaule;\r\n    } else {\r\n        return str;\r\n    }\r\n}\r\n/**\r\n * 一段距离,被分割成几份,传入一个位置,返回这个位置最接近点的值\r\n * \r\n * @export\r\n * @param {number} maxLen 线段总长\r\n * @param {number} sections 需要被分为几段\r\n * @param {number} point 传入值\r\n * @returns {number} \r\n */\r\nexport function getClosestNumber(maxLen: number, sections: number, point: number): number {\r\n    if (point < 0) return 0;\r\n    if (point > maxLen) return maxLen;\r\n    if (sections < 2) return maxLen;\r\n    let secLen = maxLen / sections;\r\n    let residue = point % secLen;\r\n    let count = Math.floor(point / secLen);\r\n    if (residue < secLen / 2) {\r\n        return count * secLen;\r\n    } else {\r\n        return (count + 1) * secLen;\r\n    }\r\n}\r\n/**\r\n * 一段距离,被分割成几份,传入一个位置,返回这个位置最接近点的下标\r\n * \r\n * @export\r\n * @param {number} maxLen 线段总长\r\n * @param {number} sections 需要被分为几段\r\n * @param {number} point 传入值\r\n * @returns {number} \r\n */\r\nexport function getClosestIndex(maxLen: number, sections: number, point: number): number {\r\n    if (point < 0) return 0;\r\n    if (point > maxLen) return sections;\r\n    if (sections < 2) return maxLen;\r\n    let secLen = maxLen / sections;\r\n    let residue = point % secLen;\r\n    let count = Math.floor(point / secLen);\r\n    if (residue < secLen / 2) {\r\n        return count;\r\n    } else {\r\n        return count + 1;\r\n    }\r\n}"]}