{"version":3,"sources":["ModuleManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\Modules","sourcesContent":["import * as JSCallNative from './JSCallNative';\r\nimport * as NativeCallJS from './NativeCallJS';\r\nimport * as Utils from './Utils';\r\nimport * as Config from './Config';\r\nimport WSManager from './WSManager';\r\nimport IMGManager from './IMGManager';\r\nimport UDManager from './UDManager';\r\nimport GMManager from './GMManager';\r\nimport UIManager from './UIManager';\r\nimport ENCManger from './ENCManager';\r\nimport MPManager from './MPManager';\r\nimport * as Enum from './Protocol';\r\nimport NodeManager from './NodeManager';\r\n\r\n/**\r\n * js调用native管理对象\r\n */\r\nexport const js_call_native = JSCallNative;\r\n/**\r\n * native调用js管理对象\r\n */\r\nexport const native_call_js = NativeCallJS;\r\n/**\r\n * 常用方法管理对象\r\n */\r\nexport const utils = Utils;\r\n/**\r\n * 配置管理对象\r\n */\r\nexport const config = Config;\r\n/**\r\n * 协议号枚举\r\n */\r\nexport const protocol = Enum.Protocol;\r\nexport const hot_key = Enum.HotKey;\r\nexport const card_type = Enum.CardType;\r\nexport const game_state = Enum.GameState;\r\nexport const suit = Enum.Suit;\r\n/**\r\n * ws管理单例\r\n */\r\nexport let ws_manager: WSManager = null;\r\n/**\r\n * 图片管理单例\r\n */\r\nexport let img_manager: IMGManager = null;\r\n/**\r\n * 用户管理单例\r\n */\r\nexport let ud_manager: UDManager = null;\r\n/**\r\n * 游戏管理单例\r\n */\r\nexport let gm_manager: GMManager = null;\r\n/**\r\n * UI管理单例\r\n */\r\nexport let ui_manager: UIManager = null;\r\n/**\r\n * 加密管理单例\r\n */\r\nexport let enc_manager: ENCManger = null;\r\n/**\r\n * 音频管理类\r\n */\r\nexport let mp_manager: MPManager = null;\r\n/**\r\n * 节点管理类\r\n */\r\nexport let node_manager: NodeManager = null;\r\n\r\nexport function errAlert() {\r\n    ui_manager.showAlert(2, '连接服务器失败，请重新启动游戏！', () => {\r\n        cc.game.end();\r\n    });\r\n    gm_manager.destroySelf();\r\n    ud_manager.destroySelf();\r\n    ws_manager.destroySelf();\r\n    gm_manager = null;\r\n    ud_manager = null;\r\n    ws_manager = null;\r\n}\r\n/**\r\n * 意外断线通知回调\r\n */\r\nexport let cb_diconnect: (event: cc.Event.EventCustom) => void = (event: cc.Event.EventCustom) => {\r\n    //0意外,1心跳超时,2未知\r\n    let accountId = null;\r\n    if (ud_manager && ud_manager.account_mine) {\r\n        accountId = ud_manager && ud_manager.account_mine.accountId;\r\n    }\r\n\r\n    gm_manager.destroySelf();\r\n    ud_manager.destroySelf();\r\n    gm_manager = null;\r\n    ud_manager = null;\r\n\r\n    ui_manager.hideLoading();\r\n    ui_manager.showLoading('正在重连,请稍后');\r\n    setTimeout(async () => {\r\n        ws_manager = WSManager.getInstance();\r\n        gm_manager = GMManager.getInstance();\r\n        ud_manager = UDManager.getInstance();\r\n        try {\r\n            let sceneName = cc.director.getScene().name;\r\n            await ws_manager.connect(config.wsUrl);//连接服务器\r\n            if (sceneName !== 'LoginScene' && accountId) {\r\n                //通过accountId获取用户信息\r\n                ws_manager.sendMsg(\r\n                    protocol.ACCOUNT_LOGIN_ACCOUNTID,\r\n                    JSON.stringify({ accountId: accountId }),\r\n                    (flag: number, content?: any) => {\r\n                        if (flag === 0) {//登录服务器成功\r\n                            ud_manager.account_mine = content as AccountData;\r\n                            ws_manager.setLoginState(true);\r\n                            //判断是否在战斗中\r\n                            if (ud_manager.account_mine && ud_manager.account_mine.gameDataAttribVo && ud_manager.account_mine.gameDataAttribVo.tableId !== 0) {\r\n                                //获取当前最新的桌子数据\r\n                                ws_manager.sendMsg(\r\n                                    protocol.DZPKER_TABLE_GET_TABLE_INFO,\r\n                                    JSON.stringify({ tableId: ud_manager.account_mine.gameDataAttribVo.tableId }),\r\n                                    (flag: number, content?: any) => {\r\n                                        if (flag === 0) {\r\n                                            gm_manager.setTableData(content as TableData);\r\n                                            if (sceneName !== 'GameScene') {\r\n                                                cc.director.loadScene('GameScene', () => {\r\n                                                    ui_manager.showTip('重连成功!');\r\n                                                });\r\n                                            } else {\r\n                                                ui_manager.showTip('重连成功!');\r\n                                            }\r\n                                        } else {\r\n                                            errAlert();\r\n                                        }\r\n                                    });\r\n                            } else {\r\n                                if (sceneName === 'GameScene') {\r\n                                    cc.director.loadScene('HomeScene', () => {\r\n                                        ui_manager.showTip('重连成功!');\r\n                                    });\r\n                                } else {\r\n                                    ui_manager.showTip('重连成功!');\r\n                                }\r\n                            }\r\n                        } else {//登录服务器失败\r\n                            errAlert();\r\n                        }\r\n                    });\r\n            } else {\r\n                ui_manager.hideLoading();\r\n            }\r\n        } catch (err) {\r\n            errAlert();\r\n        }\r\n    }, 100);\r\n}\r\n\r\n/**\r\n * 初始化单例对象\r\n * \r\n * @export\r\n */\r\nexport function init(): void {\r\n    ws_manager = WSManager.getInstance();\r\n    img_manager = IMGManager.getInstance();\r\n    ud_manager = UDManager.getInstance();\r\n    ui_manager = UIManager.getInstance();\r\n    enc_manager = ENCManger.getInstance();\r\n    gm_manager = GMManager.getInstance();\r\n    mp_manager = MPManager.getInstance();\r\n    node_manager = NodeManager.getInstance();\r\n\r\n    cc.systemEvent.on('cb_diconnect', cb_diconnect, this);\r\n}\r\n/**\r\n * 释放所有单例对象\r\n * \r\n * @export\r\n */\r\nexport function destroy() {\r\n    img_manager.destroySelf();\r\n    ws_manager.destroySelf();\r\n    ui_manager.destroySelf();\r\n    ud_manager.destroySelf();\r\n    gm_manager.destroySelf();\r\n    mp_manager.destroySelf();\r\n    node_manager.destroySelf();\r\n\r\n    img_manager = null;\r\n    ws_manager = null;\r\n    ui_manager = null;\r\n    ud_manager = null;\r\n    gm_manager = null;\r\n    mp_manager = null;\r\n    node_manager = null;\r\n\r\n    cc.systemEvent.off('cb_diconnect', cb_diconnect, this);\r\n}\r\n"]}